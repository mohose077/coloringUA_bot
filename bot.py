# bot.py
import os
import logging
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)
from config import TELEGRAM_BOT_TOKEN, RENDER_EXTERNAL_URL
from generator import generate_coloring_image

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

flask_app = Flask(__name__)
telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç, —â–æ —Å—Ç–≤–æ—Ä—é—î —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏ –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ üñçÔ∏è\n\n"
        "1. –û–±–µ—Ä–∏ –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏\n"
        "2. –û–±–µ—Ä–∏ —Ç–µ–º—É\n"
        "3. –í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Ñ–æ—Ä–º–∞—Ç\n"
        "4. –û—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏!\n\n"
        "‚¨áÔ∏è –û–±–µ—Ä–∏ –≤—ñ–∫:"
    )
    keyboard = [["2-3 —Ä–æ–∫–∏", "4 —Ä–æ–∫–∏"], ["5 —Ä–æ–∫—ñ–≤", "6 —Ä–æ–∫—ñ–≤"]]
    await update.message.reply_text("–í—ñ–∫ –¥–∏—Ç–∏–Ω–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

# –í—ñ–∫
async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    keyboard = [["–î—ñ—Å–Ω–µ–π", "–¢–≤–∞—Ä–∏–Ω–∏"], ["–ú–∞—à–∏–Ω–∫–∏", "–î–∏–Ω–æ–∑–∞–≤—Ä–∏"], ["–ö–∞–∑–∫–æ–≤—ñ", "–á–∂–∞"]]
    await update.message.reply_text("‚¨ÜÔ∏è –û–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

# –¢–µ–º–∞
async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["topic"] = update.message.text
    keyboard = [["1", "3", "5"], ["10"]]
    await update.message.reply_text("üî¢ –û–±–µ—Ä–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

# –ö—ñ–ª—å–∫—ñ—Å—Ç—å
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["amount"] = update.message.text
    keyboard = [["A4", "A5"]]
    await update.message.reply_text("üóúÔ∏è –û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

# –§–æ—Ä–º–∞—Ç
async def handle_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["format"] = update.message.text
    age = context.user_data.get("age")
    topic = context.user_data.get("topic")
    amount = int(context.user_data.get("amount"))
    user_id = update.effective_chat.id

    await update.message.reply_text("üîß –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏...")

    for i in range(amount):
        prompt = f"{topic} for children {age}"
        image_url = generate_coloring_image(prompt)
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"like|{image_url}"),
                InlineKeyboardButton("üëé –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"dislike|{image_url}")
            ]
        ])

        try:
            await context.bot.send_photo(chat_id=user_id, photo=image_url, caption=f"üñº –†–æ–∑–º–∞–ª—å–æ–≤–∫–∞ {i+1}/{amount}", reply_markup=keyboard)
        except Exception as e:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

    await update.message.reply_text("‚úÖ –£—Å—ñ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ! –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫–∏!")

# –û—Ü—ñ–Ω–∫–∞
async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, image_url = query.data.split("|")
    await query.edit_message_caption(caption=f"{query.message.caption}\n\n‚úÖ –í–∏ –æ—Ü—ñ–Ω–∏–ª–∏: {'üëç' if action == 'like' else 'üëé'}")

# –û–±—Ä–æ–±–Ω–∏–∫–∏
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Regex("^(2-3 —Ä–æ–∫–∏|4 —Ä–æ–∫–∏|5 —Ä–æ–∫—ñ–≤|6 —Ä–æ–∫—ñ–≤)$"), handle_age))
telegram_app.add_handler(MessageHandler(filters.Regex("^(–î—ñ—Å–Ω–µ–π|–¢–≤–∞—Ä–∏–Ω–∏|–ú–∞—à–∏–Ω–∫–∏|–î–∏–Ω–æ–∑–∞–≤—Ä–∏|–ö–∞–∑–∫–æ–≤—ñ|–á–∂–∞)$"), handle_topic))
telegram_app.add_handler(MessageHandler(filters.Regex("^(1|3|5|10)$"), handle_amount))
telegram_app.add_handler(MessageHandler(filters.Regex("^(A4|A5)$"), handle_format))
telegram_app.add_handler(CallbackQueryHandler(handle_rating))

# Flask –º–∞—Ä—à—Ä—É—Ç
@flask_app.route('/')
def home():
    return '‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î'

@flask_app.route('/webhook', methods=['POST'])
async def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    await telegram_app.process_update(update)
    return 'OK', 200

if __name__ == "__main__":
    import asyncio
    asyncio.run(telegram_app.bot.delete_webhook(drop_pending_updates=True))
    if RENDER_EXTERNAL_URL:
        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        asyncio.run(telegram_app.bot.set_webhook(url=webhook_url))
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host="0.0.0.0", port=port)
